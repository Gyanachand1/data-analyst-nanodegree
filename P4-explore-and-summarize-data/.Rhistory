legend.position =    "right",
legend.direction =   "vertical",
legend.justification = "center",
legend.box =         NULL,
panel.background =   element_rect(fill = "black", colour = NA),
panel.border =       element_rect(fill = NA, colour = "white"),
panel.grid.major =   element_line(colour = "grey20", size = 0.2),
panel.grid.minor =   element_line(colour = "grey5", size = 0.5),
panel.spacing =       unit(0.25, "lines"),
strip.background =   element_rect(fill = "grey30", colour = "grey10"),
strip.text.x =       element_text(),
strip.text.y =       element_text(angle = -90),
plot.background =    element_rect(colour = "black", fill = "black"),
plot.title =         element_text(size = rel(1.2)),
plot.margin =        unit(c(1, 1, 0.5, 0.5), "lines"),
complete = TRUE
)
}
# Check that it is a complete theme
attr(theme_custom(), "complete")
theme_custom <- function(base_size = 10, base_family = "Helvetica") {
theme(
line =               element_line(colour = "black", size = 0.5, linetype = 1,
lineend = "butt"),
rect =               element_rect(fill = "white", colour = "black", size = 0.5, linetype = 1),
text =               element_text(family = base_family, face = "plain",
colour = "black", size = base_size,
hjust = 0.5, vjust = 0.5, angle = 0, lineheight = 0.9),
axis.text =          element_text(size = rel(0.8), colour = "white", margin = 0.5),
strip.text =         element_text(size = rel(0.8), colour = "white"),
axis.line =          element_blank(),
axis.text.x =        element_text(vjust = 1),
axis.text.y =        element_text(hjust = 1),
axis.ticks =         element_line(colour = "white", size = 0.2),
axis.title =         element_text(colour = "white"),
axis.title.x =       element_text(vjust = 1),
axis.title.y =       element_text(angle = 90),
axis.ticks.length =  unit(0.3, "lines"),
#axis.ticks.margin =  unit(0.5, "lines"), # margin in axis.text
legend.background =  element_rect(colour = NA),
legend.spacing  =      unit(0.2, "cm"),
legend.key =         element_rect(fill = "black", colour = "white"),
legend.key.size =    unit(1.2, "lines"),
legend.key.height =  NULL,
legend.key.width =   NULL,
legend.text =        element_text(size = rel(0.8), colour = "white"),
legend.text.align =  NULL,
legend.title =       element_text(size = rel(0.8), face = "bold", hjust = 0, colour = "white"),
legend.title.align = NULL,
legend.position =    "right",
legend.direction =   "vertical",
legend.justification = "center",
legend.box =         NULL,
panel.background =   element_rect(fill = "black", colour = NA),
panel.border =       element_rect(fill = NA, colour = "white"),
panel.grid.major =   element_line(colour = "grey20", size = 0.2),
panel.grid.minor =   element_line(colour = "grey5", size = 0.5),
panel.spacing =       unit(0.25, "lines"),
strip.background =   element_rect(fill = "grey30", colour = "grey10"),
strip.text.x =       element_text(),
strip.text.y =       element_text(angle = -90),
plot.background =    element_rect(colour = "black", fill = "black"),
plot.title =         element_text(size = rel(1.2)),
plot.margin =        unit(c(1, 1, 0.5, 0.5), "lines"),
complete = TRUE
)
}
# Check that it is a complete theme
attr(theme_custom(), "complete")
theme_custom <- function(base_size = 10, base_family = "Helvetica") {
theme(
line =               element_line(colour = "black", size = 0.5, linetype = 1,
lineend = "butt"),
rect =               element_rect(fill = "white", colour = "black", size = 0.5, linetype = 1),
text =               element_text(family = base_family, face = "plain",
colour = "black", size = base_size,
hjust = 0.5, vjust = 0.5, angle = 0, lineheight = 0.9),
axis.text =          element_text(size = rel(0.8), colour = "white", margin = 0.5),
strip.text =         element_text(size = rel(0.8), colour = "white"),
axis.line =          element_blank(),
axis.text.x =        element_text(vjust = 1),
axis.text.y =        element_text(hjust = 1),
axis.ticks =         element_line(colour = "white", size = 0.2),
axis.title =         element_text(colour = "white"),
axis.title.x =       element_text(vjust = 1),
axis.title.y =       element_text(angle = 90),
axis.ticks.length =  unit(0.3, "lines"),
#axis.ticks.margin =  unit(0.5, "lines"), # margin in axis.text
legend.background =  element_rect(colour = NA),
legend.spacing  =      unit(0.2, "cm"),
legend.key =         element_rect(fill = "black", colour = "white"),
legend.key.size =    unit(1.2, "lines"),
legend.key.height =  NULL,
legend.key.width =   NULL,
legend.text =        element_text(size = rel(0.8), colour = "white"),
legend.text.align =  NULL,
legend.title =       element_text(size = rel(0.8), face = "bold", hjust = 0, colour = "white"),
legend.title.align = NULL,
legend.position =    "right",
legend.direction =   "vertical",
legend.justification = "center",
legend.box =         NULL,
panel.background =   element_rect(fill = "black", colour = NA),
panel.border =       element_rect(fill = NA, colour = "white"),
panel.grid.major =   element_line(colour = "grey20", size = 0.2),
panel.grid.minor =   element_line(colour = "grey5", size = 0.5),
panel.spacing =       unit(0.25, "lines"),
strip.background =   element_rect(fill = "grey30", colour = "grey10"),
strip.text.x =       element_text(),
strip.text.y =       element_text(angle = -90),
plot.background =    element_rect(colour = "black", fill = "black"),
plot.title =         element_text(size = rel(1.2)),
plot.margin =        unit(c(1, 1, 0.5, 0.5), "lines"),
complete = TRUE
)
}
# Check that it is a complete theme
attr(theme_custom(), "complete")
theme_custom <- function(base_size = 10, base_family = "Helvetica") {
theme(
line =               element_line(colour = "black", size = 0.5, linetype = 1,
lineend = "butt"),
rect =               element_rect(fill = "white", colour = "black", size = 0.5, linetype = 1),
text =               element_text(family = base_family, face = "plain",
colour = "black", size = base_size,
hjust = 0.5, vjust = 0.5, angle = 0, lineheight = 0.9),
axis.text =          element_text(size = rel(0.8), colour = "white", margin = 0.5),
strip.text =         element_text(size = rel(0.8), colour = "white"),
axis.line =          element_blank(),
axis.text.x =        element_text(vjust = 1),
axis.text.y =        element_text(hjust = 1),
axis.ticks =         element_line(colour = "white", size = 0.2),
axis.title =         element_text(colour = "white"),
axis.title.x =       element_text(vjust = 1),
axis.title.y =       element_text(angle = 90),
axis.ticks.length =  unit(0.3, "lines"),
#axis.ticks.margin =  unit(0.5, "lines"), # margin in axis.text
legend.background =  element_rect(colour = NA),
legend.spacing  =      unit(0.2, "cm"),
legend.key =         element_rect(fill = "black", colour = "white"),
legend.key.size =    unit(1.2, "lines"),
legend.key.height =  NULL,
legend.key.width =   NULL,
legend.text =        element_text(size = rel(0.8), colour = "white"),
legend.text.align =  NULL,
legend.title =       element_text(size = rel(0.8), face = "bold", hjust = 0, colour = "white"),
legend.title.align = NULL,
legend.position =    "right",
legend.direction =   "vertical",
legend.justification = "center",
legend.box =         NULL,
panel.background =   element_rect(fill = "black", colour = NA),
panel.border =       element_rect(fill = NA, colour = "white"),
panel.grid.major =   element_line(colour = "grey20", size = 0.2),
panel.grid.minor =   element_line(colour = "grey5", size = 0.5),
panel.spacing =       unit(0.25, "lines"),
strip.background =   element_rect(fill = "grey30", colour = "grey10"),
strip.text.x =       element_text(),
strip.text.y =       element_text(angle = -90),
plot.background =    element_rect(colour = "black", fill = "black"),
plot.title =         element_text(size = rel(1.2)),
plot.margin =        unit(c(1, 1, 0.5, 0.5), "lines"),
complete = TRUE
)
}
# Check that it is a complete theme
attr(theme_custom(), "complete")
theme_custom <- function(base_size = 10, base_family = "Helvetica") {
theme(
line =               element_line(colour = "black", size = 0.5, linetype = 1,
lineend = "butt"),
rect =               element_rect(fill = "white", colour = "black", size = 0.5, linetype = 1),
text =               element_text(family = base_family, face = "plain",
colour = "black", size = base_size,
hjust = 0.5, vjust = 0.5, angle = 0, lineheight = 0.9),
axis.text =          element_text(size = rel(0.8), colour = "white", margin = 0.5),
strip.text =         element_text(size = rel(0.8), colour = "white"),
axis.line =          element_blank(),
axis.text.x =        element_text(vjust = 1),
axis.text.y =        element_text(hjust = 1),
axis.ticks =         element_line(colour = "white", size = 0.2),
axis.title =         element_text(colour = "white"),
axis.title.x =       element_text(vjust = 1),
axis.title.y =       element_text(angle = 90),
axis.ticks.length =  unit(0.3, "lines"),
#axis.ticks.margin =  unit(0.5, "lines"), # margin in axis.text
legend.background =  element_rect(colour = NA),
legend.spacing  =      unit(0.2, "cm"),
legend.key =         element_rect(fill = "black", colour = "white"),
legend.key.size =    unit(1.2, "lines"),
legend.key.height =  NULL,
legend.key.width =   NULL,
legend.text =        element_text(size = rel(0.8), colour = "white"),
legend.text.align =  NULL,
legend.title =       element_text(size = rel(0.8), face = "bold", hjust = 0, colour = "white"),
legend.title.align = NULL,
legend.position =    "right",
legend.direction =   "vertical",
legend.justification = "center",
legend.box =         NULL,
panel.background =   element_rect(fill = "black", colour = NA),
panel.border =       element_rect(fill = NA, colour = "white"),
panel.grid.major =   element_line(colour = "grey20", size = 0.2),
panel.grid.minor =   element_line(colour = "grey5", size = 0.5),
panel.spacing =       unit(0.25, "lines"),
strip.background =   element_rect(fill = "grey30", colour = "grey10"),
strip.text.x =       element_text(),
strip.text.y =       element_text(angle = -90),
plot.background =    element_rect(colour = "black", fill = "black"),
plot.title =         element_text(size = rel(1.2)),
plot.margin =        unit(c(1, 1, 0.5, 0.5), "lines"),
complete = TRUE
)
}
# Check that it is a complete theme
attr(theme_custom(), "complete")
theme_custom <- function(base_size = 10, base_family = "Helvetica") {
theme(
line =               element_line(colour = "black", size = 0.5, linetype = 1,
lineend = "butt"),
rect =               element_rect(fill = "white", colour = "black", size = 0.5, linetype = 1),
text =               element_text(family = base_family, face = "plain",
colour = "black", size = base_size,
hjust = 0.5, vjust = 0.5, angle = 0, lineheight = 0.9),
axis.text =          element_text(size = rel(0.8), colour = "white", margin = 0.5),
strip.text =         element_text(size = rel(0.8), colour = "white"),
axis.line =          element_blank(),
axis.text.x =        element_text(vjust = 1),
axis.text.y =        element_text(hjust = 1),
axis.ticks =         element_line(colour = "white", size = 0.2),
axis.title =         element_text(colour = "white"),
axis.title.x =       element_text(vjust = 1),
axis.title.y =       element_text(angle = 90),
axis.ticks.length =  unit(0.3, "lines"),
#axis.ticks.margin =  unit(0.5, "lines"), # margin in axis.text
legend.background =  element_rect(colour = NA),
legend.spacing  =      unit(0.2, "cm"),
legend.key =         element_rect(fill = "black", colour = "white"),
legend.key.size =    unit(1.2, "lines"),
legend.key.height =  NULL,
legend.key.width =   NULL,
legend.text =        element_text(size = rel(0.8), colour = "white"),
legend.text.align =  NULL,
legend.title =       element_text(size = rel(0.8), face = "bold", hjust = 0, colour = "white"),
legend.title.align = NULL,
legend.position =    "right",
legend.direction =   "vertical",
legend.justification = "center",
legend.box =         NULL,
panel.background =   element_rect(fill = "black", colour = NA),
panel.border =       element_rect(fill = NA, colour = "white"),
panel.grid.major =   element_line(colour = "grey20", size = 0.2),
panel.grid.minor =   element_line(colour = "grey5", size = 0.5),
panel.spacing =       unit(0.25, "lines"),
strip.background =   element_rect(fill = "grey30", colour = "grey10"),
strip.text.x =       element_text(),
strip.text.y =       element_text(angle = -90),
plot.background =    element_rect(colour = "black", fill = "black"),
plot.title =         element_text(size = rel(1.2)),
plot.margin =        unit(c(1, 1, 0.5, 0.5), "lines"),
complete = TRUE
)
}
# Check that it is a complete theme
attr(theme_custom(), "complete")
# Load the Data
redwines <- read.csv('wineQualityReds.csv')
dim(redwines)
#names(redwines)
summary(redwines)
# New variables
redwines$quality.factor <- factor(redwines$quality)
redwines$quality.cat <- NA
redwines$quality.cat <- ifelse(redwines$quality>=7, 'good','medium')
redwines$quality.cat <- ifelse(redwines$quality<=4, 'bad',redwines$quality.cat) # if not, leave the previous values
redwines$quality.cat <- factor(redwines$quality.cat, levels = list('bad', 'medium','good')) # set the order!
print("Variables after dividing into quality groups")
str(redwines) #summary of values for each variable
#unique(redwines$quality.cat)
ggplot(aes(x = quality), data = redwines) + geom_histogram(binwidth = 1, fill = "brown", color= "black") + ggtitle('Quality')+ theme_custom()# +theme_light(base_size = 10)
#ggplot(aes(x = sulphates), data = redwines) + geom_histogram(binwidth = .02) + scale_x_log10() + ggtitle('Sulphates')
library(GGally)
#ggpairs(redwines, axisLabels = 'internal', lower = list(continous = 'points', mapping = aes(shape= quality.cat, color=quality.cat), size = 8), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
theme_custom <- function(base_size = 10, base_family = "Helvetica") {
theme(
line =               element_line(colour = "black", size = 0.5, linetype = 1,
lineend = "butt"),
rect =               element_rect(fill = "white", colour = "black", size = 0.5, linetype = 1),
text =               element_text(family = base_family, face = "plain",
colour = "black", size = base_size,
hjust = 0.5, vjust = 0.5, angle = 0, lineheight = 0.9),
axis.text =          element_text(size = rel(0.8), colour = "white"),
strip.text =         element_text(size = rel(0.8), colour = "white"),
axis.line =          element_blank(),
axis.text.x =        element_text(vjust = 1),
axis.text.y =        element_text(hjust = 1),
axis.ticks =         element_line(colour = "white", size = 0.2),
axis.title =         element_text(colour = "white"),
axis.title.x =       element_text(vjust = 1),
axis.title.y =       element_text(angle = 90),
axis.ticks.length =  unit(0.3, "lines"),
#axis.ticks.margin =  unit(0.5, "lines"), # margin in axis.text
legend.background =  element_rect(colour = NA),
legend.spacing  =      unit(0.2, "cm"),
legend.key =         element_rect(fill = "black", colour = "white"),
legend.key.size =    unit(1.2, "lines"),
legend.key.height =  NULL,
legend.key.width =   NULL,
legend.text =        element_text(size = rel(0.8), colour = "white"),
legend.text.align =  NULL,
legend.title =       element_text(size = rel(0.8), face = "bold", hjust = 0, colour = "white"),
legend.title.align = NULL,
legend.position =    "right",
legend.direction =   "vertical",
legend.justification = "center",
legend.box =         NULL,
panel.background =   element_rect(fill = "black", colour = NA),
panel.border =       element_rect(fill = NA, colour = "white"),
panel.grid.major =   element_line(colour = "grey20", size = 0.2),
panel.grid.minor =   element_line(colour = "grey5", size = 0.5),
panel.spacing =       unit(0.25, "lines"),
strip.background =   element_rect(fill = "grey30", colour = "grey10"),
strip.text.x =       element_text(),
strip.text.y =       element_text(angle = -90),
plot.background =    element_rect(colour = "black", fill = "black"),
plot.title =         element_text(size = rel(1.2)),
plot.margin =        unit(c(1, 1, 0.5, 0.5), "lines"),
complete = TRUE
)
}
# Check that it is a complete theme
attr(theme_custom(), "complete")
ggplot(aes(x = quality), data = redwines) + geom_histogram(binwidth = 1, fill = "brown", color= "black") + ggtitle('Quality')+ theme_custom()# +theme_light(base_size = 10)
#ggplot(aes(x = sulphates), data = redwines) + geom_histogram(binwidth = .02) + scale_x_log10() + ggtitle('Sulphates')
library(GGally)
#ggpairs(redwines, axisLabels = 'internal', lower = list(continous = 'points', mapping = aes(shape= quality.cat, color=quality.cat), size = 8), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
ggplot(aes(x = quality), data = redwines) + geom_histogram(binwidth = 1, fill = "brown", color= "black") + ggtitle('Quality')+ theme_custom(base_size = 10)# +theme_light(base_size = 10)
#ggplot(aes(x = sulphates), data = redwines) + geom_histogram(binwidth = .02) + scale_x_log10() + ggtitle('Sulphates')
library(GGally)
#ggpairs(redwines, axisLabels = 'internal', lower = list(continous = 'points', mapping = aes(shape= quality.cat, color=quality.cat), size = 8), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
# Chunk 1: global_options
knitr::opts_chunk$set(fig.width=4, fig.height=4, fig.path='Figs/',
echo=FALSE, warning=FALSE, message=FALSE, include = TRUE, results= 'hide')
# Chunk 2
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
#setwd('Git/data-analyst-nanodegree/P4-explore-and-summarize-data/')
library(ggplot2)
library(gridExtra)
# Chunk 3
# Load the Data
redwines <- read.csv('wineQualityReds.csv')
dim(redwines)
#names(redwines)
summary(redwines)
# New variables
redwines$quality.factor <- factor(redwines$quality)
redwines$quality.cat <- NA
redwines$quality.cat <- ifelse(redwines$quality>=7, 'good','medium')
redwines$quality.cat <- ifelse(redwines$quality<=4, 'bad',redwines$quality.cat) # if not, leave the previous values
redwines$quality.cat <- factor(redwines$quality.cat, levels = list('bad', 'medium','good')) # set the order!
print("Variables after dividing into quality groups")
str(redwines) #summary of values for each variable
#unique(redwines$quality.cat)
# Chunk 4
ggplot(aes(x = quality), data = redwines) + geom_histogram(binwidth = 1, fill = "brown", color= "black") + ggtitle('Quality') +theme_light(base_size = 10)
#ggplot(aes(x = sulphates), data = redwines) + geom_histogram(binwidth = .02) + scale_x_log10() + ggtitle('Sulphates')
library(GGally)
#ggpairs(redwines, axisLabels = 'internal', lower = list(continous = 'points', mapping = aes(shape= quality.cat, color=quality.cat), size = 8), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
# Chunk 5
library(gridExtra)
#Fixed
p1 <- ggplot(aes(x = fixed.acidity), data = redwines) + geom_histogram(binwidth=.5) + ggtitle('Fixed acidity') # +  scale_x_log10() #+ theme_light(base_size = 10)
# Volatile
p2 <-ggplot(aes(x = volatile.acidity), data = redwines) + geom_histogram(binwidth = .05)+  scale_x_log10() + ggtitle('Volatile acidity')  #+ theme_light(base_size = 10)
# Citric acid
p3 <-ggplot(aes(x = citric.acid), data = redwines) + geom_histogram(binwidth = .05) + ggtitle('Citric acidity') #+ theme_light(base_size = 10)
grid.arrange(p1,p2, p3, ncol=3) + theme_light(base_size = 10)
# Chunk 6
#Residual sugar
p4 <- ggplot(aes(x = residual.sugar), data = redwines) + geom_histogram(binwidth=.1) +  scale_x_log10() + ggtitle('Residual sugar')  #+ theme_light(base_size = 10)
p4
# Chunk 7
#Chlorides
p5 <- ggplot(aes(x = chlorides), data = redwines) + geom_histogram(binwidth=.1) +  scale_x_log10() + ggtitle('Chlorides')#+ theme_light(base_size = 10)
#Free sulfur dioxide
p6 <- ggplot(aes(x = free.sulfur.dioxide), data = redwines) + geom_histogram(binwidth=.1) +  scale_x_log10() + ggtitle('Free sulfur dioxide') #+ theme_light(base_size = 10)
#Total sulfur dioxide
p7 <- ggplot(aes(x = total.sulfur.dioxide), data = redwines) + geom_histogram(binwidth=.1) +  scale_x_log10() + ggtitle('Total sulfur dioxide') #+ theme_light(base_size = 10)
grid.arrange(p5, p6, p7, ncol=3) + theme_light(base_size = 10)
# Chunk 8
#Density
p8 <- ggplot(aes(x = density), data = redwines) + geom_histogram(binwidth=.0005) +  scale_x_log10() + ggtitle('Density')#+ theme_light(base_size = 10)
#pH
p9 <- ggplot(aes(x = pH), data = redwines) + geom_histogram(binwidth=.01) +  scale_x_log10() + ggtitle('pH') #+ theme_light(base_size = 10)
#Sulphates
p10 <- ggplot(aes(x = sulphates), data = redwines) + geom_histogram(binwidth=.05) +  scale_x_log10() + ggtitle('Sulphates')#+ theme_light(base_size = 10)
#Alcohol
p11 <- ggplot(aes(x = alcohol), data = redwines) + geom_histogram(binwidth=.01) +  scale_x_log10() + ggtitle('Alcohol')#+ theme_light(base_size = 10)
grid.arrange(p8, p9, p10, p11, ncol=2) + theme_light(base_size = 10);
# Chunk 9
# Chunk 10
library(gridExtra)
#Fixed
p1_a <- ggplot(aes(x = fixed.acidity, fill= quality.cat), data = redwines) + geom_histogram(binwidth=.5) + ggtitle('Fixed acidity') # +  scale_x_log10() #+ theme_light(base_size = 10)
p1_b <-ggplot(aes(y = fixed.acidity, x= quality.cat, color= quality.cat), data = redwines) + geom_boxplot() + ggtitle('Fixed acidity')
# Volatile
p2_a <-ggplot(aes(x = volatile.acidity, fill= quality.cat ), data = redwines) + geom_histogram(binwidth = .05)+  scale_x_log10() + ggtitle('Volatile acidity')  #+ theme_light(base_size = 10)
p2_b <-ggplot(aes(y = volatile.acidity, x= quality.cat, color= quality.cat), data = redwines) + geom_boxplot() + ggtitle('Volatile acidity') +  scale_y_log10()
# Citric acid
p3_a <-ggplot(aes(x = citric.acid, fill= quality.cat ), data = redwines) + geom_histogram(binwidth = .05) + ggtitle('Citric acidity') #+ theme_light(base_size = 10)
p3_b <-ggplot(aes(y = citric.acid, x= quality.cat, color= quality.cat), data = redwines) + geom_boxplot() + ggtitle('Citric acidity')
grid.arrange(p1_a, p1_b,p2_a,p2_b, p3_a,p3_b, ncol=2) + theme_light(base_size = 10)
# Chunk 11
#Residual sugar
p4_a <- ggplot(aes(x = residual.sugar, fill= quality.cat), data = redwines) + geom_histogram(binwidth=.1) +  scale_x_log10() + ggtitle('Residual sugar')  #+ theme_light(base_size = 10)
p4_b <-ggplot(aes(y = residual.sugar, x= quality.cat, color= quality.cat), data = redwines) + geom_boxplot() + scale_y_log10() + ggtitle('Residual sugar') #transformed y
grid.arrange(p4_a,p4_b, ncol=2) + theme_light(base_size = 10)
# Chunk 12
#Chlorides
p5_a <- ggplot(aes(x = chlorides, fill= quality.cat), data = redwines) + geom_histogram(binwidth=.1) +  scale_x_log10() + ggtitle('Chlorides')#+ theme_light(base_size = 10)
p5_b <-ggplot(aes(y = chlorides, x= quality.cat, color= quality.cat), data = redwines) + geom_boxplot() + scale_y_log10() + ggtitle('Chlorides') #transformed y
#Free sulfur dioxide
p6_a <- ggplot(aes(x = free.sulfur.dioxide, fill= quality.cat), data = redwines) + geom_histogram(binwidth=.1) +  scale_x_log10() + ggtitle('Free sulfur dioxide') #+ theme_light(base_size = 10)
p6_b <-ggplot(aes(y = free.sulfur.dioxide, x= quality.cat, color= quality.cat), data = redwines) + geom_boxplot() + scale_y_log10() + ggtitle('Free sulfur dioxide') #transformed y
#Total sulfur dioxide
p7_a <- ggplot(aes(x = total.sulfur.dioxide, fill= quality.cat), data = redwines) + geom_histogram(binwidth=.1) +  scale_x_log10() + ggtitle('Total sulfur dioxide') #+ theme_light(base_size = 10)
p7_b <-ggplot(aes(y = total.sulfur.dioxide, x= quality.cat, color= quality.cat), data = redwines) + geom_boxplot() + scale_y_log10() + ggtitle('Total sulfur dioxide') #transformed y
grid.arrange(p5_a,p5_b,p6_a,p6_b,p7_a,p7_b, ncol=2) + theme_light(base_size = 10)
# Chunk 13
#Density
p8_a <- ggplot(aes(x = density, fill= quality.cat), data = redwines) + geom_histogram(binwidth=.0005) +  scale_x_log10() + ggtitle('Density')#+ theme_light(base_size = 10)
p8_b <-ggplot(aes(y = density, x= quality.cat, color= quality.cat), data = redwines) + geom_boxplot() + scale_y_log10() + ggtitle('Density')#transformed y
#pH
p9_a <- ggplot(aes(x = pH, fill= quality.cat), data = redwines) + geom_histogram(binwidth=.01) +  scale_x_log10() + ggtitle('pH') #+ theme_light(base_size = 10)
p9_b <-ggplot(aes(y = pH, x= quality.cat, color= quality.cat), data = redwines) + geom_boxplot() + scale_y_log10() + ggtitle('pH')  #transformed y
#Sulphates
p10_a <- ggplot(aes(x = sulphates, fill= quality.cat), data = redwines) + geom_histogram(binwidth=.05) +  scale_x_log10() + ggtitle('Sulphates')#+ theme_light(base_size = 10)
p10_b <-ggplot(aes(y = sulphates, x= quality.cat, color= quality.cat), data = redwines) + geom_boxplot() + scale_y_log10() + ggtitle('Sulphates')#transformed y
#Alcohol
p11_a <- ggplot(aes(x = alcohol, fill= quality.cat), data = redwines) + geom_histogram(binwidth=.01) +  scale_x_log10() + ggtitle('Alcohol')#+ theme_light(base_size = 10)
p11_b <-ggplot(aes(y = alcohol, x= quality.cat, color= quality.cat), data = redwines) + geom_boxplot() + scale_y_log10() + ggtitle('Alcohol')#transformed y
grid.arrange(p8_a,p8_b,p9_a,p9_b,p10_a,p10_b,p11_a,p11_b, ncol=2) + theme_light(base_size = 10);
# Chunk 14
# Chunk 15
# Chunk 16
# Chunk 17
# Chunk 18
p1 <-ggplot(aes(x = fixed.acidity ), data = redwines) + geom_histogram(binwidth = .01) +  scale_x_log10() #+ theme_light(base_size = 10)
p2 <-ggplot(aes(x = volatile.acidity ), data = redwines) + geom_histogram(binwidth = .01)+  scale_x_log10() #+ theme_light(base_size = 10)
p3 <-ggplot(aes(x = citric.acid ), data = redwines) + geom_histogram(binwidth = .01)#+ theme_light(base_size = 10)
p4 <-ggplot(aes(x = residual.sugar), data = redwines) + geom_histogram(binwidth = .05) +  scale_x_log10() #+ theme_light(base_size = 10)
p5 <-ggplot(aes(x = chlorides ), data = redwines) + geom_histogram(binwidth = .01)  +  scale_x_log10()#+ theme_light
p6 <-ggplot(aes(x = free.sulfur.dioxide), data = redwines) + geom_histogram(binwidth = 0.05) +  scale_x_log10() #+ theme_light(base_size = 10)
p7 <-ggplot(aes(x = total.sulfur.dioxide), data = redwines) + geom_histogram(binwidth = 0.05) #+ theme_light(base_size = 10)
p8 <-ggplot(aes(x = density), data = redwines) + geom_histogram(binwidth = .0005) #+ theme_light(base_size = 10)
grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8, ncol=4) + theme_light(base_size = 10)
# Chunk 19
library(gridExtra)
p1 <-ggplot(aes(x = fixed.acidity ), data = redwines) + geom_histogram(binwidth=.5)# +  scale_x_log10() #+ theme_light(base_size = 10)
p2 <-ggplot(aes(x = volatile.acidity ), data = redwines) + geom_histogram(binwidth = .05)#+  scale_x_log10() #+ theme_light(base_size = 10)
p3 <-ggplot(aes(x = citric.acid ), data = redwines) + geom_histogram(binwidth = .05)#+ theme_light(base_size = 10)
p4 <-ggplot(aes(x = residual.sugar), data = redwines) + geom_histogram(binwidth = .5) #+  scale_x_log10() #+ theme_light(base_size = 10)
p5 <-ggplot(aes(x = chlorides ), data = redwines) + geom_histogram(binwidth = .01)  #+  scale_x_log10()#+ theme_light
p6 <-ggplot(aes(x = free.sulfur.dioxide), data = redwines) + geom_histogram(binwidth = 5) #+  scale_x_log10() #+ theme_light(base_size = 10)
p7 <-ggplot(aes(x = total.sulfur.dioxide), data = redwines) + geom_histogram(binwidth = 10) #+ theme_light(base_size = 10)
p8 <-ggplot(aes(x = density), data = redwines) + geom_histogram(binwidth = .0005) #+ theme_light(base_size = 10)
p9 <-ggplot(aes(x = pH ), data = redwines) + geom_histogram(binwidth = .05)  #+  scale_x_log10()#+ theme_light
p10 <-ggplot(aes(x = sulphates), data = redwines) + geom_histogram(binwidth = 0.05) #+  scale_x_log10() #+ theme_light(base_size = 10)
p11 <-ggplot(aes(x = alcohol), data = redwines) + geom_histogram(binwidth = .5) #+ theme_light(base_size = 10)
p12 <-ggplot(aes(x = quality), data = redwines) + geom_bar() #+ theme_light(base_size = 10)
grid.arrange(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12, ncol=4) + theme_light(base_size = 10)
ggplot(aes(x = quality), data = redwines) + geom_histogram(binwidth = 1, fill = "brown", color= "black") + ggtitle('Quality') +theme_light(base_size = 10)
#ggplot(aes(x = sulphates), data = redwines) + geom_histogram(binwidth = .02) + scale_x_log10() + ggtitle('Sulphates')
library(GGally)
#ggpairs(redwines, axisLabels = 'internal', lower = list(continous = 'points', mapping = aes(shape= quality.cat, color=quality.cat), size = 8), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
library(gridExtra)
#Fixed
p1_a <- ggplot(aes(x = fixed.acidity, fill= quality.cat), data = redwines) + geom_histogram(binwidth=.5, color = "black") + ggtitle('Fixed acidity') # +  scale_x_log10() #+ theme_light(base_size = 10)
p1_b <-ggplot(aes(y = fixed.acidity, x= quality.cat, color= quality.cat), data = redwines) + geom_boxplot() + ggtitle('Fixed acidity')
# Volatile
p2_a <-ggplot(aes(x = volatile.acidity, fill= quality.cat ), data = redwines) + geom_histogram(binwidth = .05)+  scale_x_log10() + ggtitle('Volatile acidity')  #+ theme_light(base_size = 10)
p2_b <-ggplot(aes(y = volatile.acidity, x= quality.cat, color= quality.cat), data = redwines) + geom_boxplot() + ggtitle('Volatile acidity') +  scale_y_log10()
# Citric acid
p3_a <-ggplot(aes(x = citric.acid, fill= quality.cat ), data = redwines) + geom_histogram(binwidth = .05) + ggtitle('Citric acidity') #+ theme_light(base_size = 10)
p3_b <-ggplot(aes(y = citric.acid, x= quality.cat, color= quality.cat), data = redwines) + geom_boxplot() + ggtitle('Citric acidity')
grid.arrange(p1_a, p1_b,p2_a,p2_b, p3_a,p3_b, ncol=2) + theme_light(base_size = 10)
library(gridExtra)
#Fixed
p1_a <- ggplot(aes(x = fixed.acidity, fill= quality.cat), data = redwines) + geom_histogram(binwidth=.5, color = "black", size = 1) + ggtitle('Fixed acidity') # +  scale_x_log10() #+ theme_light(base_size = 10)
p1_b <-ggplot(aes(y = fixed.acidity, x= quality.cat, color= quality.cat), data = redwines) + geom_boxplot() + ggtitle('Fixed acidity')
# Volatile
p2_a <-ggplot(aes(x = volatile.acidity, fill= quality.cat ), data = redwines) + geom_histogram(binwidth = .05)+  scale_x_log10() + ggtitle('Volatile acidity')  #+ theme_light(base_size = 10)
p2_b <-ggplot(aes(y = volatile.acidity, x= quality.cat, color= quality.cat), data = redwines) + geom_boxplot() + ggtitle('Volatile acidity') +  scale_y_log10()
# Citric acid
p3_a <-ggplot(aes(x = citric.acid, fill= quality.cat ), data = redwines) + geom_histogram(binwidth = .05) + ggtitle('Citric acidity') #+ theme_light(base_size = 10)
p3_b <-ggplot(aes(y = citric.acid, x= quality.cat, color= quality.cat), data = redwines) + geom_boxplot() + ggtitle('Citric acidity')
grid.arrange(p1_a, p1_b,p2_a,p2_b, p3_a,p3_b, ncol=2) + theme_light(base_size = 10)
library(gridExtra)
#Fixed
p1_a <- ggplot(aes(x = fixed.acidity, fill= quality.cat, size = 0.1), data = redwines) + geom_histogram(binwidth=.5, color = "black") + ggtitle('Fixed acidity') # +  scale_x_log10() #+ theme_light(base_size = 10)
p1_b <-ggplot(aes(y = fixed.acidity, x= quality.cat, color= quality.cat), data = redwines) + geom_boxplot() + ggtitle('Fixed acidity')
# Volatile
p2_a <-ggplot(aes(x = volatile.acidity, fill= quality.cat ), data = redwines) + geom_histogram(binwidth = .05)+  scale_x_log10() + ggtitle('Volatile acidity')  #+ theme_light(base_size = 10)
p2_b <-ggplot(aes(y = volatile.acidity, x= quality.cat, color= quality.cat), data = redwines) + geom_boxplot() + ggtitle('Volatile acidity') +  scale_y_log10()
# Citric acid
p3_a <-ggplot(aes(x = citric.acid, fill= quality.cat ), data = redwines) + geom_histogram(binwidth = .05) + ggtitle('Citric acidity') #+ theme_light(base_size = 10)
p3_b <-ggplot(aes(y = citric.acid, x= quality.cat, color= quality.cat), data = redwines) + geom_boxplot() + ggtitle('Citric acidity')
grid.arrange(p1_a, p1_b,p2_a,p2_b, p3_a,p3_b, ncol=2) + theme_light(base_size = 10)
