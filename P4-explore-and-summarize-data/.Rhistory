DT[,{print(V2)
plot(V3)
NULL}]
DT[,.(V4.Sum = sum(V4)),by=V1]
DT[,.(V4.Sum = sum(V4)),by=.(V1,V2)]
DT[,.(V4.Sum = sum(V4)),by=sign(V1-1)]
DT[,.(V4.Sum = sum(V4)),
by=.(V1.01 = sign(V1-1))]
DT[1:5,.(V4.Sum = sum(V4)),by=V1]
DT[,.N,by=V1]
DT[, V1 := round(exp(V1),2)]
View(DT)
DT[, c("V1","V2") := list (round(exp(V1),2), LETTERS[4:6])]
DT[, V1 := NULL]
DT[, c("V1","V2") := NULL]
class(diamonds)
data("diamonds",package = "ggplot2")
class(diamonds)
diamonds[,.N,by=cut]
diamonds <- class(diamonds)
diamonds[,.N,by=cut]
class(diamonds)
diamonds[,.N,by=cut]
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: create data.table
library(data.table)
set.seed(45L)
DT <- data.table(V1=c(1L,2L), V2=LETTERS[1:3], V3=round(rnorm(4),4), V4=1:12)
# Chunk 3
#Subsetting rows by numbers.
DT[3:5,] #or DT[3:5]
DT[V2 == 'A']
DT[ V2 %in% c("A","C")]
# Chunk 4
DT[,V2]
#. is an alias to list()
DT[,.(V2,V3)]
DT[,sum(V1)]
DT[,.(sum(V1),sd(V3))]
DT[,.(Aggregate = sum(V1),Sd.V3 = sd(V3))]
DT[,.(V1, Sd.V3 = sd(V3))]
DT[,{print(V2)
plot(V3)
NULL}]
# Chunk 5
DT[,.(V4.Sum = sum(V4)),by=V1]
DT[,.(V4.Sum = sum(V4)),by=.(V1,V2)]
DT[,.(V4.Sum = sum(V4)),by=sign(V1-1)]
#Assigning new column name
DT[,.(V4.Sum = sum(V4)),by=.(V1.01 = sign(V1-1))]
DT[1:5,.(V4.Sum = sum(V4)),by=V1]
# Using .N to get the total number of observations of each group
DT[,.N,by=V1]
DT[, ':=' (V1 = round(exp(V1),2), V2 = LETTERS[4:6])][]
DT <- data.table(V1=c(1L,2L), V2=LETTERS[1:3], V3=round(rnorm(4),4), V4=1:12)
DT
DT[, ':=' (V1 = round(exp(V1),2), V2 = LETTERS[4:6])][]
data("flights",package = "nycflights13" )
install.packages("nycflights13")
data("flights",package = "nycflights13" )
class(flights)
View(flights)
View(flights)
setDT(flights)
summary(flights)
summarize(flights)
str(flights)
flights[dest == "MIA", .N]
flights[, sum(air_time)]
flights[!is.na(air_time), sum(air_time)]
lubridate::seconds_to_period(flights[!is.na(air_time), sum(air_time)])
lubridate::seconds_to_period(flights[is.na(air_time), sum(air_time)])
lubridate::seconds_to_period(flights[!is.na(air_time), sum(air_time)])
lubridate::seconds_to_period(flights[!is.na(air_time), sum(air_time)*60])
flights[, V1 := mean(dep_delay, na.rm = T), by = origin]
flights[, V1 := mean(dep_delay, na.rm = T), by = origin]
flights[, V1 := mean(dep_delay, na.rm = TRUE), by = origin]
View(flights)
delays_month  <- flights(, ':=' (mean_delay =mean(dep_delay), sd_delay = sd(dep_delay), n_flights = .N), by= month)
delays_month  <- flights[, ':=' (mean_delay =mean(dep_delay), sd_delay = sd(dep_delay), n_flights = .N), by= month]
View(delays_month)
delays_month  <- flights[, ':=' (mean_delay =mean(dep_delay, na.rm= TRUE), sd_delay = sd(dep_delay, na.rm= TRUE), n_flights = .N), by= month]
delays_month  <- flights[, ':=' (mean_delay =mean(dep_delay, na.rm= TRUE), sd_delay = sd(dep_delay, na.rm= TRUE), n_flights = .N), by= month]
View(delays_month)
View(delays_month)
delays_month  <- flights[, (mean_delay =mean(dep_delay, na.rm= TRUE), sd_delay = sd(dep_delay, na.rm= TRUE), n_flights = .N), by= month]
delays_month  <- flights[, ':=' (mean_delay =mean(dep_delay, na.rm= TRUE), sd_delay = sd(dep_delay, na.rm= TRUE), n_flights = .N), by= month][order(month)]
delays_month  <- flights[, ':=' (mean_delay =mean(dep_delay, na.rm= TRUE), sd_delay = sd(dep_delay, na.rm= TRUE), n_flights = .N), by= month][order(month)]
View(DT)
delays_month  <- flights[, .(mean_delay =mean(dep_delay, na.rm= TRUE), sd_delay = sd(dep_delay, na.rm= TRUE), n_flights = .N), by= month][order(month)]
flights[,:=(not_delay = (dep_delay<0))]
flights[,not_delay = (dep_delay<0)]
flights <- flights[,not_delay = (dep_delay<0)]
flights <- flights[,':='(not_delay = (dep_delay<0))]
View(flights)
flights <- flights[,':='(not_delay = as.numeric((dep_delay<0)))]
View(flights)
flights[not_delay==1,N := .N, by= carrier ]
View(flights[not_delay==1,N := .N, by= carrier ])
not_delayed <- flights[not_delay==1,N := .N, by= carrier ]
View(not_delayed)
not_delayed <- flights[not_delay==1,.(N := .N), by= carrier ]
setnames(flights, not_delayed, i_hate_delays)
setnames(flights, 'not_delayed', 'i_hate_delays')
setnames(flights,"not_delayed", "i_hate_delays")
setnames(flights,"not_delay", "i_hate_delays")
library(shiny)
runExample('01_hellow')
runExample('01_hello')
?geom_jitter
# Chunk 1: global_options
knitr::opts_chunk$set(fig.cap = NULL, fig.width=4, fig.height=4, fig.path='Figs/',
fig.align = 'center',
echo=FALSE, warning=FALSE, message=FALSE, include = TRUE, results= 'hide')
# Chunk 2: setup
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
this_dir <- 'Git/data-analyst-nanodegree/P4-explore-and-summarize-data/'
setwd("~")
setwd(this_dir)
library(ggplot2)
library(gridExtra)
# stable version on CRAN
#install.packages("bookdown")
library(bookdown)
# Captioner
# Now included in bookdown
#captioner is an R package for generating figure numbers and captions
#https://github.com/adletaw/captioner
#install.packages("devtools")
#devtools::install_github("adletaw/captioner")
#library(captioner)
# Chunk 3
# Load the Data
redwines <- read.csv('wineQualityReds.csv')
dim(redwines)
#names(redwines)
summary(redwines)
# New variables
#redwines$quality.factor <- factor(redwines$quality)
redwines$quality.cat <- NA
redwines$quality.cat <- ifelse(redwines$quality>=7, 'good','medium')
redwines$quality.cat <- ifelse(redwines$quality<=4, 'bad',redwines$quality.cat) # if not, leave the previous values
redwines$quality.cat <- factor(redwines$quality.cat, levels = list('bad', 'medium','good')) # set the order!
print("Variables after dividing into quality groups")
str(redwines) #summary of values for each variable
#unique(redwines$quality.cat)
# Chunk 4
ggplot(aes(x = quality), data = redwines) + geom_histogram(binwidth = 1, fill = "brown", color= "black") + ggtitle('Quality') +theme_light(base_size = 10)
#ggplot(aes(x = sulphates), data = redwines) + geom_histogram(binwidth = .02) + scale_x_log10() + ggtitle('Sulphates')
library(GGally)
#ggpairs(redwines, axisLabels = 'internal', lower = list(continous = 'points', mapping = aes(shape= quality.cat, color=quality.cat), size = 8), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
# Chunk 5
library(gridExtra)
#Fixed
p1 <- ggplot(aes(x = fixed.acidity), data = redwines) + geom_histogram(binwidth=.5, color = "black", fill = "turquoise3") + ggtitle('Fixed acidity') +  theme_light(base_size = 10) # +  scale_x_log10() #+
# Volatile
p2 <-ggplot(aes(x = volatile.acidity), data = redwines) + geom_histogram(binwidth = .05,  color = "black", fill = "turquoise3")+  scale_x_log10() + ggtitle('Volatile acidity')  + theme_light(base_size = 10)
# Citric acid
p3 <-ggplot(aes(x = citric.acid), data = redwines) + geom_histogram(binwidth = .05,  color = "black", fill = "turquoise3") + ggtitle('Citric acidity') + theme_light(base_size = 10)
grid.arrange(p1,p2, p3, ncol=3) + theme_light(base_size = 10)
# Chunk 6
#Residual sugar
p4 <- ggplot(aes(x = residual.sugar), data = redwines) + geom_histogram(binwidth=.1,  color = "black", fill = "turquoise3") +  scale_x_log10() + ggtitle('Residual sugar')  + theme_light(base_size = 10)
p4
# Chunk 7
#Chlorides
p5 <- ggplot(aes(x = chlorides), data = redwines) + geom_histogram(binwidth=.1,  color = "black", fill = "turquoise3") +  scale_x_log10() + ggtitle('Chlorides')+ theme_light(base_size = 10)
#Free sulfur dioxide
p6 <- ggplot(aes(x = free.sulfur.dioxide), data = redwines) + geom_histogram(binwidth=.1,  color = "black", fill = "turquoise3") +  scale_x_log10() + ggtitle('Free sulfur dioxide') + theme_light(base_size = 10)
#Total sulfur dioxide
p7 <- ggplot(aes(x = total.sulfur.dioxide), data = redwines) + geom_histogram(binwidth=.1,  color = "black", fill = "turquoise3") +  scale_x_log10() + ggtitle('Total sulfur dioxide') + theme_light(base_size = 10)
grid.arrange(p5, p6, p7, ncol=3) + theme_light(base_size = 10)
# Chunk 8
#Density
p8 <- ggplot(aes(x = density), data = redwines) + geom_histogram(binwidth=.0005,  color = "black", fill = "turquoise3") +  scale_x_log10() + ggtitle('Density')+ theme_light(base_size = 10)
#pH
p9 <- ggplot(aes(x = pH), data = redwines) + geom_histogram(binwidth=.01, color = "black", fill = "turquoise3") +  scale_x_log10() + ggtitle('pH') + theme_light(base_size = 10)
#Sulphates
p10 <- ggplot(aes(x = sulphates), data = redwines) + geom_histogram(binwidth=.05,  color = "black", fill = "turquoise3") +  scale_x_log10() + ggtitle('Sulphates')+ theme_light(base_size = 10)
#Alcohol
p11 <- ggplot(aes(x = alcohol), data = redwines) + geom_histogram(binwidth=.01, color = "black", fill = "turquoise3") +  scale_x_log10() + ggtitle('Alcohol')+ theme_light(base_size = 10)
grid.arrange(p8, p9, p10, p11, ncol=2) + theme_light(base_size = 10);
# Chunk 9
summary(redwines)
colnames(redwines)
# Chunk 10: univariatetranformation
#Residual sugar
p4_base <- ggplot(aes(x = residual.sugar), data = redwines)
p4_log <- p4_base + geom_histogram(binwidth=.1,  color = "black", fill = "turquoise3") +  scale_x_log10(breaks = c(1, 2, 5, 10)) + ggtitle('Residual sugar: log10 scaled')+ theme_light(base_size = 10)
p4_normal <- p4_base + geom_histogram(binwidth=.5,  color = "black", fill = "turquoise3") + ggtitle('Residual sugar')+ theme_light(base_size = 10)
#Chlorides
p5_base <- ggplot(aes(x = chlorides), data = redwines)
p5_log <- p5_base + geom_histogram(binwidth=.1,  color = "black", fill = "turquoise3") +  scale_x_log10(breaks = c(.05, .1 ,.2, .5)) + ggtitle('Chlorides: log10 scaled')+ theme_light(base_size = 8)
p5_normal <- p5_base + geom_histogram(binwidth=.02,  color = "black", fill = "turquoise3") + ggtitle('Chlorides')+ theme_light(base_size = 10)
grid.arrange(p4_normal, p4_log, p5_normal, p5_log, ncol=2) + theme_light(base_size = 10)
# Chunk 11
# Chunk 12: bivariateplotsacidity
#Fixed acidity
p1_a <- ggplot(aes(x = fixed.acidity, fill= quality.cat), data = redwines) + geom_histogram(binwidth=.5, color = "black", size= 0.25) + ggtitle('Fixed acidity') + theme_light(base_size = 10) # +  scale_x_log10() #+ theme_light(base_size = 10)
p1_b <-ggplot(aes(y = fixed.acidity, x= quality.cat, fill= quality.cat), data = redwines) + geom_boxplot(outlier.alpha = 1/10) + geom_boxplot() + ggtitle('Fixed acidity') +  theme_light(base_size = 10)
# Volatile
p2_a <-ggplot(aes(x = volatile.acidity, fill= quality.cat ), data = redwines) + geom_histogram(binwidth = .05, color = "black", size= 0.25)+  scale_x_log10() + ggtitle('Volatile acidity')  + theme_light(base_size = 10)
p2_b <-ggplot(aes(y = volatile.acidity, x= quality.cat, fill= quality.cat), data = redwines) + geom_boxplot(outlier.alpha = 1/10) + geom_boxplot() + ggtitle('Volatile acidity') +  scale_y_log10() +  theme_light(base_size = 10)
# Citric acid
p3_a <-ggplot(aes(x = citric.acid, fill= quality.cat ), data = redwines) + geom_histogram(binwidth = .05, color = "black", size= 0.25) + ggtitle('Citric acidity') + theme_light(base_size = 10)
p3_b <-ggplot(aes(y = citric.acid, x= quality.cat, fill= quality.cat), data = redwines) + geom_boxplot(outlier.alpha = 1/10) + geom_boxplot() + ggtitle('Citric acidity') +  theme_light(base_size = 10)
grid.arrange(p1_a, p1_b, p2_a,p2_b, p3_a,p3_b, ncol=2) + theme_light(base_size = 10)
# Chunk 13
#Residual sugar
p4_a <- ggplot(aes(x = residual.sugar, fill= quality.cat), data = redwines) + geom_histogram(binwidth=.1, color = "black", size= 0.25) +  scale_x_log10() + ggtitle('Residual sugar')  + theme_light(base_size = 10)
p4_b <-ggplot(aes(y = residual.sugar, x= quality.cat, fill= quality.cat), data = redwines) + geom_boxplot(outlier.alpha = 1/10) + scale_y_log10() + ggtitle('Residual sugar') +  theme_light(base_size = 10) #transformed y
grid.arrange(p4_a,p4_b, ncol=2) + theme_light(base_size = 10)
# Chunk 14
#Chlorides
p5_a <- ggplot(aes(x = chlorides, fill= quality.cat), data = redwines) + geom_histogram(binwidth=.1, color = "black", size= 0.25) +  scale_x_log10() + ggtitle('Chlorides')+ theme_light(base_size = 10)
p5_b <-ggplot(aes(y = chlorides, x= quality.cat, fill= quality.cat), data = redwines) + geom_boxplot(outlier.alpha = 1/10) + scale_y_log10() + ggtitle('Chlorides') + theme_light(base_size = 10)#transformed y
#Free sulfur dioxide
p6_a <- ggplot(aes(x = free.sulfur.dioxide, fill= quality.cat), data = redwines) + geom_histogram(binwidth=.1, color = "black", size= 0.25) +  scale_x_log10() + ggtitle('Free sulfur dioxide') + theme_light(base_size = 10)
p6_b <-ggplot(aes(y = free.sulfur.dioxide, x= quality.cat, fill= quality.cat), data = redwines) + geom_boxplot(outlier.alpha = 1/10) + scale_y_log10() + ggtitle('Free sulfur dioxide') +  theme_light(base_size = 10) #transformed y
#Total sulfur dioxide
p7_a <- ggplot(aes(x = total.sulfur.dioxide, fill= quality.cat), data = redwines) + geom_histogram(binwidth=.1, color = "black", size= 0.25) +  scale_x_log10() + ggtitle('Total sulfur dioxide') + theme_light(base_size = 10)
p7_b <-ggplot(aes(y = total.sulfur.dioxide, x= quality.cat, fill= quality.cat), data = redwines) + geom_boxplot(outlier.alpha = 1/10) + scale_y_log10() + ggtitle('Total sulfur dioxide') +  theme_light(base_size = 10)#transformed y
grid.arrange(p5_a,p5_b,p6_a,p6_b,p7_a,p7_b, ncol=2) + theme_light(base_size = 10)
# Chunk 15
#Density
p8_a <- ggplot(aes(x = density, fill= quality.cat), data = redwines) + geom_histogram(binwidth=.0005, color = "black", size= 0.25) +  scale_x_log10() + ggtitle('Density')+ theme_light(base_size = 10)
p8_b <-ggplot(aes(y = density, x= quality.cat, fill= quality.cat), data = redwines) + geom_boxplot(alpha= 1, outlier.alpha = 1/10) + scale_y_log10() + ggtitle('Density')+  theme_light(base_size = 10)#transformed y
#pH
p9_a <- ggplot(aes(x = pH, fill= quality.cat), data = redwines) + geom_histogram(binwidth=.01, color = "black", size= 0.25) +  scale_x_log10() + ggtitle('pH') + theme_light(base_size = 10)
p9_b <-ggplot(aes(y = pH, x= quality.cat, fill= quality.cat), data = redwines) + geom_boxplot(alpha= 1, outlier.alpha = 1/10) + scale_y_log10() + ggtitle('pH')+ theme_light(base_size = 10)#transformed y
#Sulphates
p10_a <- ggplot(aes(x = sulphates, fill= quality.cat), data = redwines) + geom_histogram(binwidth=.05, color = "black", size= 0.25) +  scale_x_log10() + ggtitle('Sulphates')+ theme_light(base_size = 10)
p10_b <-ggplot(aes(y = sulphates, x= quality.cat, fill= quality.cat), data = redwines) + geom_boxplot(alpha= 1, outlier.alpha = 1/10) + scale_y_log10() + ggtitle('Sulphates')+  theme_light(base_size = 10)#transformed y
#Alcohol
p11_a <- ggplot(aes(x = alcohol, fill= quality.cat), data = redwines) + geom_histogram(binwidth=.01, color = "black", size= 0.25) +  scale_x_log10() + ggtitle('Alcohol')+ theme_light(base_size = 10)
p11_b <-ggplot(aes(y = alcohol, x= quality.cat, fill= quality.cat), data = redwines) + geom_boxplot(alpha= 1, outlier.alpha = 1/10) + scale_y_log10() + ggtitle('Alcohol') + theme_light(base_size = 10)#transformed y
grid.arrange(p8_a,p8_b,p9_a,p9_b,p10_a,p10_b,p11_a,p11_b, ncol=2) + theme_light(base_size = 10);
# Chunk 16
ggcorr_custom <- function(x, method = "pairwise", palette = "RdYlGn", cols_to_avoid = c("X", "quality.cat"), layout_exp = 0, base_size_font=7) {
require(ggplot2)
require(GGally)
require(grid)
require(gridBase)
require(gridExtra)
column_names = colnames(x)
cols_names = column_names[!(column_names %in% cols_to_avoid)]
po.nopanel <- list(theme(
panel.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.text.x = element_text(angle = -90)))
corr <-ggcorr(data=subset(x, select = cols_names),
label = TRUE,
geom = "blank",
hjust = 1,
angle = -25,
digits = 2,
nbreaks = 8,
name = "",
label_round = 1,
label_size = 3,
legend.size = 7,
layout.exp = layout_exp,
size = 3 #argument of geom_text for the diagonals
) +
geom_point(aes(size=abs(coefficient), color = breaks,
alpha = round((abs(coefficient) > 0.28)*abs(coefficient), 1))) +
scale_color_brewer(palette = "RdBu")+
scale_alpha(range=c(0.,.7))+
scale_size(range=c(0,9))+
guides(fill= FALSE, color= FALSE, size = FALSE, alpha = FALSE) +
ggplot2::theme_minimal(base_size = base_size_font)+
ggplot2::theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
return(corr)
}
ggcorr_custom(redwines, layout_exp = 2) #+ ggplot2::theme_light(base_size= 7)
# Chunk 17: multivariatecorrquality
corr_total_1 <- ggcorr_custom(subset(redwines, quality.cat=="bad"), layout_exp = 2, base_size_font = 8)  + ggplot2:: ggtitle("Bad")
corr_total_2 <- ggcorr_custom(subset(redwines, quality.cat=="medium"), layout_exp = 2, base_size_font = 8) + ggplot2:: ggtitle("Medium")
corr_total_3 <- ggcorr_custom(subset(redwines, quality.cat=="good"), layout_exp = 2, base_size_font = 8) + ggplot2:: ggtitle("Good")
gridExtra::grid.arrange(corr_total_1, corr_total_2, corr_total_3, ncol = 3, name = "Correlation vs Quality")  +  theme(plot.title = element_text(size = 12))
# + ggplot2:: theme_light(base_size = 6)
#temp <- gridExtra::arrangeGrob(corr_total_1, corr_total_2, corr_total_3, nrow = 3, name = "Correlation vs Quality") + ggplot2:: theme_light(base_size = 10)
#grid.newpage()
#grid.draw(temp)
# Chunk 18: corrreport
#fig.cap="Correlation between alcohol, volatile acidity and sulphates \\label{Correlations_comparative_from_table}"}
corr_report <- ggcorr_custom(subset(redwines, select= c("volatile.acidity", "alcohol", "sulphates")), layout_exp = 1, base_size_font = 8 )
#c("volatile.acidity", "alcohol", "sulphates", "quality.cat","quality"))
multi1 <- ggplot(aes(x = sulphates, y = alcohol, fill= quality.cat), data = redwines)+ geom_point(alpha=1/5, aes(color= quality.cat))+ facet_wrap(~redwines$quality.cat) +theme_light(base_size = 8)
multi2 <- ggplot(aes(x = sulphates, y = volatile.acidity, fill= quality.cat), data = redwines)+ geom_point(alpha=1/5, aes(color= quality.cat))+ facet_wrap(~redwines$quality.cat) +theme_light(base_size = 8)
multi3 <- ggplot(aes(x = volatile.acidity, y = alcohol, fill= quality.cat), data = redwines)+ geom_point(alpha=1/5, aes(color= quality.cat))+ facet_wrap(~redwines$quality.cat) +theme_light(base_size = 8)
grid.arrange(corr_report, multi1,multi2,multi3,ncol=2,
layout_matrix = cbind(c(1,1,1), c(2,3,4))) + theme_light(base_size = 8);#+ ggplot2::guides(color= FALSE, fill=FALSE);
corr_article <- ggcorr_custom(subset(redwines, select= c("total.sulfur.dioxide","pH", "sulphates")) , layout_exp = 1, base_size_font = 8)# + ggplot2::theme_light(base_size= 8)
#c("total.sulfur.dioxide","pH", "sulphates", "quality.cat","quality")
multi1 <- ggplot(aes(x = sulphates, y = pH, fill= quality.cat), data = redwines)+ geom_point(alpha=1/5, aes(color= quality.cat))+ facet_wrap(~redwines$quality.cat) +theme_light(base_size = 8)
multi2 <- ggplot(aes(x = sulphates, y = total.sulfur.dioxide, fill= quality.cat), data = redwines)+ geom_point(alpha=1/5, aes(color= quality.cat))+ facet_wrap(~redwines$quality.cat) +theme_light(base_size = 8)
multi3 <- ggplot(aes(x = total.sulfur.dioxide, y = pH, fill= quality.cat), data = redwines)+ geom_jitter(aes(color= quality.cat),alpha=1/5,,pch=21,cex=4)+ facet_wrap(~redwines$quality.cat) +theme_light(base_size = 8)
grid.newpage()
grid.arrange(corr_article, multi1,multi2,multi3,ncol=2,
layout_matrix = cbind(c(1,1,1), c(2,3,4)))
#http://www.sthda.com/english/wiki/ggplot2-easy-way-to-mix-multiple-graphs-on-the-same-page-r-software-and-data-visualization
#grid.arrange(bp, arrangeGrob(dp, sc), ncol = 2)
?geom_jitter()
corr_article <- ggcorr_custom(subset(redwines, select= c("total.sulfur.dioxide","pH", "sulphates")) , layout_exp = 1, base_size_font = 8)# + ggplot2::theme_light(base_size= 8)
#c("total.sulfur.dioxide","pH", "sulphates", "quality.cat","quality")
multi1 <- ggplot(aes(x = sulphates, y = pH, fill= quality.cat), data = redwines)+ geom_point(alpha=1/5, aes(color= quality.cat))+ facet_wrap(~redwines$quality.cat) +theme_light(base_size = 8)
multi2 <- ggplot(aes(x = sulphates, y = total.sulfur.dioxide, fill= quality.cat), data = redwines)+ geom_point(alpha=1/5, aes(color= quality.cat))+ facet_wrap(~redwines$quality.cat) +theme_light(base_size = 8)
multi3 <- ggplot(aes(x = total.sulfur.dioxide, y = pH, fill= quality.cat), data = redwines)+ geom_jitter(aes(color= quality.cat),alpha=1/5,,pch=21,cex=4)+ facet_wrap(~redwines$quality.cat) +theme_light(base_size = 8)
grid.newpage()
grid.arrange(corr_article, multi1,multi2,multi3,ncol=2,
layout_matrix = cbind(c(1,1,1), c(2,3,4)))
#http://www.sthda.com/english/wiki/ggplot2-easy-way-to-mix-multiple-graphs-on-the-same-page-r-software-and-data-visualization
#grid.arrange(bp, arrangeGrob(dp, sc), ncol = 2)
corr_article <- ggcorr_custom(subset(redwines, select= c("total.sulfur.dioxide","pH", "sulphates")) , layout_exp = 1, base_size_font = 8)# + ggplot2::theme_light(base_size= 8)
#c("total.sulfur.dioxide","pH", "sulphates", "quality.cat","quality")
multi1 <- ggplot(aes(x = sulphates, y = pH, fill= quality.cat), data = redwines)+ geom_point(alpha=1/5, aes(color= quality.cat))+ facet_wrap(~redwines$quality.cat) +theme_light(base_size = 8)
multi2 <- ggplot(aes(x = sulphates, y = total.sulfur.dioxide, fill= quality.cat), data = redwines)+ geom_point(alpha=1/5, aes(color= quality.cat))+ facet_wrap(~redwines$quality.cat) +theme_light(base_size = 8)
multi3 <- ggplot(aes(x = total.sulfur.dioxide, y = pH, fill= quality.cat), data = redwines) + geom_jitter(aes(color= quality.cat),alpha=1/5,pch=1,cex=4)+ facet_wrap(~redwines$quality.cat) +theme_light(base_size = 8)
grid.newpage()
grid.arrange(corr_article, multi1,multi2,multi3,ncol=2,
layout_matrix = cbind(c(1,1,1), c(2,3,4)))
#http://www.sthda.com/english/wiki/ggplot2-easy-way-to-mix-multiple-graphs-on-the-same-page-r-software-and-data-visualization
#grid.arrange(bp, arrangeGrob(dp, sc), ncol = 2)
corr_article <- ggcorr_custom(subset(redwines, select= c("total.sulfur.dioxide","pH", "sulphates")) , layout_exp = 1, base_size_font = 8)# + ggplot2::theme_light(base_size= 8)
#c("total.sulfur.dioxide","pH", "sulphates", "quality.cat","quality")
multi1 <- ggplot(aes(x = sulphates, y = pH, fill= quality.cat), data = redwines)+ geom_point(alpha=1/5, aes(color= quality.cat))+ facet_wrap(~redwines$quality.cat) +theme_light(base_size = 8)
multi2 <- ggplot(aes(x = sulphates, y = total.sulfur.dioxide, fill= quality.cat), data = redwines)+ geom_point(alpha=1/5, aes(color= quality.cat))+ facet_wrap(~redwines$quality.cat) +theme_light(base_size = 8)
multi3 <- ggplot(aes(x = total.sulfur.dioxide, y = pH, fill= quality.cat), data = redwines) + geom_jitter(aes(color= quality.cat),alpha=1/5,width = 0.2)+ facet_wrap(~redwines$quality.cat) +theme_light(base_size = 8)
grid.newpage()
grid.arrange(corr_article, multi1,multi2,multi3,ncol=2,
layout_matrix = cbind(c(1,1,1), c(2,3,4)))
#http://www.sthda.com/english/wiki/ggplot2-easy-way-to-mix-multiple-graphs-on-the-same-page-r-software-and-data-visualization
#grid.arrange(bp, arrangeGrob(dp, sc), ncol = 2)
redwines
summary(redwines)
summary(redwines)$quality
summary(redwines)
?summary
summary(redwines$quality)
?kable
knitr::kable(summary(redwines$quality), format="markdown", caption = "redwines.quality")
knitr::kable(summary(redwines$quality), format="markdown", caption = "redwines.quality")
x<- summary(redwines$quality)
z
x
data.frame(x)
knitr::kable(do.call(cbind, lapply(redwines$quality, summary)) format="markdown", caption = "redwines.quality")
knitr::kable(do.call(cbind, lapply(redwines$quality, summary)), format="markdown", caption = "redwines.quality")
do.call(cbind, lapply(redwines$quality, summary))
data.frame(unclass(summary(redwines$quality)), check.names = FALSE, stringsAsFactors = FALSE)
> my.summary <- summary(DATA$ids)
> data.frame(ids=names(my.summary), nums=my.summary)
> my.summary <- summary(redwines$quality)
> mysummary <- summary(redwines$quality)
> mysummary <- summary(redwines$quality)
mysummary <- summary(redwines$quality)
mysummary
> my.summary <- summary(DATA$ids)
> data.frame(ids=names(my.summary), nums=my.summary)
data.frame(mysummary)
latex(summary(redwines$quality))
Hmisc::latex(summary(redwines$quality))
##CONVERT SUMMARY to DF and PRINT
#knitr::kable(data.frame(unclass(summary(redwines$quality)), check.names = FALSE, stringsAsFactors = FALSE), format="markdown", caption = "redwines.quality")
print(summary(redwines$quality), prmsd=TRUE, digits=1)
Hmisc::latex(summary(redwines$quality))
data.frame(m)
?print
print.table(summary(redwines$quality))
knitr::kable(data.frame(unclass(summary(redwines$quality)), check.names = FALSE, stringsAsFactors = FALSE), format="markdown", caption = "redwines.quality")
?kable
##CONVERT SUMMARY to DF and PRINT
#trasposed the table i
summary_quality <- t(summary(redwines$quality))
row.names(summary_quality) < "redwines.quality"
knitr::kable(data.frame(unclass(summary_quality), check.names = FALSE, stringsAsFactors = FALSE), format="markdown", caption = "redwines.quality", row.names = TRUE)
#print(summary(redwines$quality), prmsd=TRUE, digits=1)
#print.table(summary(redwines$quality))
summary_quality
summary_quality <- data.frame(unclass(t(summary(redwines))), check.names = FALSE, stringsAsFactors = FALSE)
View(summary_quality)
View(summary_quality)
summary_quality <- data.frame(unclass(summary(redwines)), check.names = FALSE, stringsAsFactors = FALSE)
summary_quality
summary_quality$`   quality`
knitr::kable(summary_quality$quality, format="markdown", caption = "redwines.quality", row.names = TRUE)
knitr::kable(summary_quality$quality, format="markdown", caption = "redwines.quality")
summary_quality
summary_quality$`   quality`
summary_quality$quality
summary_quality$`   quality`
summary_quality <- data.frame(unclass(summary(redwines$quality)), check.names = FALSE, stringsAsFactors = FALSE)
View(summary_quality)
row.names(summary_quality) < "redwines.quality"
View(summary_quality)
knitr::kable(summary_quality, format="markdown", caption = "redwines.quality", row.names = TRUE)
##CONVERT SUMMARY to DF and PRINT
#trasposed the table i
summary_quality <- data.frame(unclass(summary(redwines)), check.names = FALSE, stringsAsFactors = FALSE)
row.names(summary_quality) < "redwines.quality"
knitr::kable(summary_quality, format="markdown", caption = "redwines.quality", row.names = TRUE)
#print(summary(redwines$quality), prmsd=TRUE, digits=1)
#print.table(summary(redwines$quality))
View(summary_quality)
rm(summary_quality)
##CONVERT SUMMARY to DF and PRINT
#trasposed the table i
summary_quality <- data.frame(unclass(summary(redwines)), check.names = FALSE, stringsAsFactors = FALSE)
row.names(summary_quality) < "redwines.quality"
knitr::kable(summary_quality, format="markdown", caption = "redwines.quality", row.names = TRUE)
r#print(summary(redwines$quality), prmsd=TRUE, digits=1)
#print.table(summary(redwines$quality))
##CONVERT SUMMARY to DF and PRINT
#trasposed the table i
summary_quality <- data.frame(unclass(summary(redwines)), check.names = FALSE, stringsAsFactors = FALSE)
row.names(summary_quality) < "redwines.quality"
knitr::kable(summary_quality, format="markdown", caption = "redwines.quality", row.names = TRUE)
#print(summary(redwines$quality), prmsd=TRUE, digits=1)
#print.table(summary(redwines$quality))
View(summary_quality)
View(summary_quality)
##CONVERT SUMMARY to DF and PRINT
#trasposed the table i
summary_quality <- data.frame(unclass(t(summary(redwines$quality))), check.names = FALSE, stringsAsFactors = FALSE)
row.names(summary_quality) < "redwines.quality"
knitr::kable(summary_quality, format="markdown", caption = "redwines.quality", row.names = TRUE)
#print(summary(redwines$quality), prmsd=TRUE, digits=1)
#print.table(summary(redwines$quality))
?data.frame
##CONVERT SUMMARY to DF and PRINT
#trasposed the table i
summary_quality <- data.frame(unclass(t(summary(redwines$quality))), check.rows = TRUE, check.names = FALSE, stringsAsFactors = FALSE, row.names= "redwines.quality")
knitr::kable(summary_quality, format="markdown", caption = "redwines.quality", row.names = TRUE)
#print(summary(redwines$quality), prmsd=TRUE, digits=1)
#print.table(summary(redwines$quality))
knitr::kable(summary_quality, format="markdown", caption = "```redwines.quality```", row.names = TRUE)
?summary
?ggpair
?ggpairs
ggpairs(redwines, axisLabels = 'internal', lower = list(continous = 'points', mapping = aes(shape= quality.cat, color=quality.cat), size = 8), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
ggpairs(redwines, axisLabels = 'internal', lower = list(continous = 'points', size = 8), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
col_to_avoid= c("X", "quality.cat")
column_names = colnames(redwines)
cols_names = column_names[!(column_names %in% cols_to_avoid)]
ggpairs(redwines, axisLabels = 'internal', lower = list(continous = 'points', size = 8), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
col_to_avoid= c("X", "quality.cat")
column_names = colnames(redwines)
cols_names = column_names[!(column_names %in% cols_to_avoid)]
ggpairs(redwines, axisLabels = 'internal', lower = list(continous = 'points', size = 8, alpha=1/10, upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
col_to_avoid= c("X", "quality.cat")
column_names = colnames(redwines)
cols_names = column_names[!(column_names %in% cols_to_avoid)]
ggpairs(redwines, axisLabels = 'internal', lower = list(continous = 'points', size = 8, alpha=1/10), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
col_to_avoid= c("X", "quality.cat")
column_names = colnames(redwines)
cols_names = column_names[!(column_names %in% cols_to_avoid)]
ggpairs(redwines, axisLabels = 'internal', lower = list(continous = 'points', size = 8, alpha=1/10), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
cols_to_avoid= c("X", "quality.cat")
column_names = colnames(redwines)
cols_names = column_names[!(column_names %in% cols_to_avoid)]
ggpairs(redwines, axisLabels = 'internal', lower = list(continous = 'points', size = 8, alpha=1/10), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
cols_to_avoid= c("X", "quality.cat")
column_names = colnames(redwines)
cols_names = column_names[!(column_names %in% cols_to_avoid)]
ggpairs(redwines, axisLabels = 'internal', lower = list(continous = 'points', size = 8, mapping = aes(alpha=1/10), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
cols_to_avoid= c("X", "quality.cat")
column_names = colnames(redwines)
cols_names = column_names[!(column_names %in% cols_to_avoid)]
ggpairs(redwines, axisLabels = 'internal', lower = list(continous = 'points', size = 8), mapping = aes(alpha=1/10), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
cols_to_avoid= c("X", "quality.cat")
column_names = colnames(redwines)
cols_names = column_names[!(column_names %in% cols_to_avoid)]
ggpairs(redwines, axisLabels = 'internal', lower = list(continous = 'points', size = 8, mapping = aes(alpha=1/10)), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
col_to_avoid= c("X", "quality.cat")
column_names = colnames(redwines)
cols_names = column_names[!(column_names %in% cols_to_avoid)]
ggpairs(redwines, axisLabels = 'internal', mapping = aes(alpha=1/10), lower = list(continous = 'points', size = 8), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
col_to_avoid= c("X", "quality.cat")
column_names = colnames(redwines)
cols_names = column_names[!(column_names %in% cols_to_avoid)]
ggpairs(redwines, axisLabels = 'internal', mapping = aes(alpha=0.1), lower = list(continous = 'points', size = 8), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
col_to_avoid= c("X", "quality.cat")
column_names = colnames(redwines)
cols_names = column_names[!(column_names %in% cols_to_avoid)]
ggpairs(redwines, axisLabels = 'internal', mapping = aes(alpha=0.1, color= "skyblue"), lower = list(continous = 'points', size = 8), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
cols_to_avoid= c("X", "quality.cat")
column_names = colnames(redwines)
cols_names = column_names[!(column_names %in% cols_to_avoid)]
ggpairs(redwines, axisLabels = 'internal',  lower = list(continous = 'points', size = 8,mapping = aes(alpha=0.1, color= "cyan3")), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
cols_to_avoid= c("X", "quality.cat")
column_names = colnames(redwines)
cols_names = column_names[!(column_names %in% cols_to_avoid)]
ggpairs(redwines, axisLabels = 'internal',  lower = list(continous = 'points', size = 8,mapping = aes(alpha=0.1, fill= "cyan3")), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_light(base_size = 8)
cols_to_avoid= c("X", "quality.cat")
column_names = colnames(redwines)
cols_names = column_names[!(column_names %in% cols_to_avoid)]
ggpairs(redwines, axisLabels = 'internal',  lower = list(continous = 'points', size = 8,mapping = aes(alpha=0.1, fill= "cyan3")), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_minimal(base_size = 8)
cols_to_avoid= c("X", "quality.cat")
column_names = colnames(redwines)
cols_names = column_names[!(column_names %in% cols_to_avoid)]
ggpairs(redwines, axisLabels = 'internal',  lower = list(continous = 'points', size = 8,mapping = aes(alpha=0.1, fill= "cyan3")), upper = list(continous = 'smooth', discrete = 'facetwrap', size = 8), columns=2:10) + theme_minimal(base_size = 8)
